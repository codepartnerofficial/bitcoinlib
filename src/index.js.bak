import * as bitcoin from "bitcoinjs-lib";
import * as ecc from "tiny-secp256k1";
import { ECPairFactory } from "ecpair";
import bchaddrjs from "bchaddrjs";
bitcoin.initEccLib(ecc);


export interface Vout {
    txid: string,
    vout: number,
    amount: number
}

export interface TxOutput {
    address: string,
    amount?: number,
    sendRemaining?: boolean
}
export class Bitcoin {
    public networks = bitcoin.networks;
    public network: bitcoin.Network = bitcoin.networks.bitcoin;
    private ECPair = ECPairFactory(ecc);
    constructor(private rpc: string, private networkName: 'mainnet' | 'testnet' | 'regtest') {
        this.network = networkName == "mainnet" ?
            bitcoin.networks.bitcoin :
            networkName == "testnet" ? bitcoin.networks.testnet
                : bitcoin.networks.regtest;
    }

    static generateAddress(networkName: 'mainnet' | 'testnet' | 'regtest', type: "segwit" | "keyhash") {
        const ECPair = ECPairFactory(ecc);
        const network = networkName == "mainnet" ?
            bitcoin.networks.bitcoin :
            networkName == "testnet" ? bitcoin.networks.testnet
                : bitcoin.networks.regtest;

        const keyPair = ECPair.makeRandom();
        const pubKey = keyPair.publicKey;
        const hash = type == 'segwit' ? bitcoin.payments.p2wpkh({
            pubkey: Buffer.from(pubKey),
            network,
        }) :
            bitcoin.payments.p2pkh({
                pubkey: Buffer.from(pubKey),
                network,
            });
        const privateKey = keyPair.toWIF();
        // console.log(p2wpkh.address,privateKey);
        const bchHash = bitcoin.payments.p2pkh({
            pubkey: Buffer.from(pubKey),
            network,
        })
        let bchaddr = bchaddrjs.toCashAddress(bchHash.address || "");
        return { address: hash.address || "", bchAddress: bchaddr, privateKey }
    }
    bufferToUint8Array = (b: Buffer | Uint8Array): Uint8Array =>
        b instanceof Buffer ? new Uint8Array(b) : b;

    safeVerify = (
        pubkey: Buffer,
        msgHash: Buffer,
        signature: Buffer
    ): boolean => {
        if (msgHash.length !== 32) return false;
        return ecc.verify(
            this.bufferToUint8Array(pubkey),
            this.bufferToUint8Array(msgHash),
            this.bufferToUint8Array(signature)
        );
    };

    sendBitcoin(rawtx: string, vout: Vout, outputs: TxOutput[], sendBackRemaining: boolean = true, privateKey: string) {
        const keyPair = this.ECPair.fromWIF(privateKey);
        const address = bitcoin.payments.p2pkh({
            pubkey: Buffer.from(keyPair.publicKey),
            network: this.network
        }).address!; // or p2wpkh, depending on key usage

        const signer: bitcoin.Signer = {
            publicKey: Buffer.from(keyPair.publicKey), // fixes the type issue
            sign: (hash: Buffer) => Buffer.from(keyPair.sign(hash)),
            signSchnorr: keyPair.signSchnorr ? (hash: Buffer): Buffer => {
                const sig = keyPair.signSchnorr!(hash); // safe to use non-null assertion
                return Buffer.from(sig);               // convert to Buffer
            }
                : undefined,
        };
        // Determine network
        // const network = bitcoin.networks.bitcoin; // or testnet

        // Create payment object
        // const p2pkh = bitcoin.payments.p2pkh({ pubkey: keyPair.publicKey, network });
        // const p2wpkh = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network });
        const psbt = new bitcoin.Psbt({ network: this.network });
        psbt.addInput({
            hash: vout.txid,
            index: vout.vout,
            nonWitnessUtxo: Buffer.from(
                rawtx, // REQUIRED for p2pkh!
                "hex"
            ),
        });
        for (let output of outputs) {
            const outputLength = psbt.txOutputs.length;
            const inputLength = psbt.inputCount;
            // const fee = psbt.getFee();
            console.log("fee", outputLength, inputLength)
            psbt.addOutput({
                address: output.address, // your recipient
                value: output.amount ? (Math.floor(output.amount * 1e8) - 1000) : output.sendRemaining ? 0 : 0, // subtract fee (e.g., 1000 sats)
            });
        }

        psbt.signInput(0, signer);
        psbt.validateSignaturesOfInput(0, this.safeVerify, Buffer.from(keyPair.publicKey));
        psbt.finalizeAllInputs();

        const tx = psbt.extractTransaction();
        console.log("P2PKH TX:", tx.toHex());
    }

    fetchFeePerVbyte() {
        if (this.networkName == "mainnet") {
            return 0.000000008
        } else {
            return 0.000000008
        }
    }
}

// const btc = new Bitcoin();

const addressObject = {
    address: 'mnUVDize2xtFDvrHrbn3j2mEVMo5YxVABQ',
    bchAddress: 'bchtest:qpx9zu4zd262vt2rvkvc5w2dmr2hfe0m9scyxv5ued',
    privateKey: 'L2T7UtdABsezrqjv3razhvfiDNBXgaezu9RRv3C6sYULAgWWcW5g'
}
const vout: Vout = {
    amount: 0.00120216,
    vout: 1,
    txid: "6bf4399cae890909b0712b51751c78700798c1edee1810ded2bc57673789a77a"
}
const toAddress = {
    address: 'n2HSdFaB473UEuSJyFPEP83san94R1Vd11',
    bchAddress: 'bchtest:qr3ucaa03luhek04s93lqwfhxzewf000xvzmeg7cjt',
    privateKey: 'L2RgJjExmtggj6jV5ai4Vim75pfmkwQ1d1eeGDH9CJnQqst4zPfD'
}
const rawTx = "020000000001011ddcc4d656ca2e11cc2c0cdc987018f7396c9d1dcc12f866800da981c0aec5950100000000fdffffff028dccd046000000001976a914795dfe1c25c1ae9965f45d66383db2bed567ac4c88ac98d50100000000001976a9144c5172a26ab4a62d4365998a394dd8d574e5fb2c88ac01409d3c376c2ef04d134b215e4acd43f383920cc7667c06aceeba7eacfe42c14bb99ae64e572007f5ddbfe568c97bb2351dd97fcb4697a6c98144cd9b9aa722551d95d34500";

// console.log("Address: ",Bitcoin.generateAddress('testnet','keyhash'))
const btc = new Bitcoin("https://bitcoin-testnet.g.alchemy.com/v2/D7iVzbC_LzMwoRzi58DhtYnv_pqG2EEq", "testnet");
btc.sendBitcoin(rawTx, vout, [{ address: toAddress.address, amount: 0.0012 }], false, addressObject.privateKey)
// 000000000000016a56fd4e6b3bf776f9497e11997dceef44a0c94425382a6bb9